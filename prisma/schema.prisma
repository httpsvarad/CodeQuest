generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  firstName String
  lastName  String
  phone     String?  @unique
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lab       Lab?
  patient   Patient?

  @@map("users")
}

model Patient {
  id           String        @id @default(uuid())
  userId       String        @unique
  address      String?
  dateOfBirth  DateTime?
  gender       String?
  latitude     Float         @default(0.0)
  longitude    Float         @default(0.0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("patients")
}

model Lab {
  id                    String        @id @default(uuid())
  userId                String        @unique
  labLocation           String
  nablCertificateNumber String
  certificateUrl        String
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  appointments          Appointment[]
  details               LabDetails?
  timeSlots             LabTimeSlot[]
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("labs")
}

model LabDetails {
  id              String    @id @default(uuid())
  labId           String    @unique
  collectionTypes String[]
  experienceYears Int?
  imageUrl        String?
  isLoved         Boolean?  @default(false)
  latitude        Float     @default(0.0)
  longitude       Float     @default(0.0)
  nextAvailable   DateTime?
  rating          Float?
  testType        String?
  labName         String
  isAvailable     Boolean   @default(true)
  lab             Lab       @relation(fields: [labId], references: [id], onDelete: Cascade)

  @@map("lab_details")
}

model LabTimeSlot {
  id         String                 @id @default(uuid())
  labId      String
  time       String
  session    Session
  isActive   Boolean                @default(true)
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
  lab        Lab                    @relation(fields: [labId], references: [id], onDelete: Cascade)
  exceptions LabTimeSlotException[]

  @@unique([labId, time])
  @@map("lab_time_slots")
}

model LabTimeSlotException {
  id            String      @id @default(uuid())
  labTimeSlotId String
  date          DateTime
  reason        String?
  isDisabled    Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  labTimeSlot   LabTimeSlot @relation(fields: [labTimeSlotId], references: [id], onDelete: Cascade)

  @@unique([labTimeSlotId, date])
  @@map("lab_timeslot_exceptions")
}

model Appointment {
  id        String    @id @default(uuid())
  patientId String
  labId     String
  date      DateTime
  time      String
  status    String    @default("Pending")
  createdAt DateTime  @default(now())
  lab       Lab       @relation(fields: [labId], references: [id], onDelete: Cascade)
  patient   Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  payments  Payment[]

  @@map("appointments")
}

model Payment {
  id            String      @id @default(uuid())
  appointmentId String
  status        String
  amount        Float
  paidAt        DateTime?
  createdAt     DateTime    @default(now())
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@map("payments")
}

enum Session {
  MORNING
  AFTERNOON
  EVENING
}

enum UserRole {
  PATIENT
  LAB
}
